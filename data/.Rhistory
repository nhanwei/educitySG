transposeX = function(x){
temp=""
if(x[1]==1){
temp=paste(temp,"1",sep=",")
}
if(x[2]==1){
temp=paste(temp,"2",sep=",")
}
if(x[3]==1){
temp=paste(temp,"3",sep=",")
}
return (temp)
}
df=data.frame(sapply(df,transposeX))
names(df)="drugs"
df$drugs=substring(df$drugs,2)
View(df)
x=c("a","a","a","b","b","c","d","d")
y=c(1,2,3,1,2,1,1,2)
df=data.frame(cbind(x,y))
df=as.data.frame.matrix(table(df))
colNames=names(df)
transposeX = function(x){
temp=""
if(x[1]==1){
temp=paste(temp,"1",sep=",")
}
if(x[2]==1){
temp=paste(temp,"2",sep=",")
}
if(x[3]==1){
temp=paste(temp,"3",sep=",")
}
return (temp)
}
df=data.frame(sapply(df,transposeX))
names(df)="drugs"
df$drugs=substring(df$drugs,2)
View(df)
x=c("a","a","a","b","b","c","d","d")
y=c(1,2,3,1,2,1,1,2)
df=data.frame(cbind(x,y))
df=as.data.frame.matrix(table(df))
colNames=names(df)
df
View(df)
df=data.frame(cbind(x,y))
df=as.data.frame.matrix(table(df))
colNames=names(df)
transposeX = function(x){
temp=""
if(x[1]==1){
temp=paste(temp,colNames[1],sep=",")
}
if(x[2]==1){
temp=paste(temp,colNames[2],sep=",")
}
if(x[3]==1){
temp=paste(temp,colNames[3],sep=",")
}
return (temp)
}
df=data.frame(sapply(df,transposeX))
names(df)="drugs"
View(df)
df=data.frame(cbind(x,y))
df=as.data.frame.matrix(table(df))
colNames=names(df)
transposeX = function(x){
temp=""
if(x[1]==1){
temp=paste(temp,colNames[1],sep=",")
}
if(x[2]==1){
temp=paste(temp,colNames[2],sep=",")
}
if(x[3]==1){
temp=paste(temp,colNames[3],sep=",")
}
return (temp)
}
df=data.frame(sapply(df,transposeX))
View(df)
df2=cbind(colNames,df)
View(df2)
View(df)
View(df2)
names(df)=c("x","y")
df$drugs=substring(df$drugs,2)
x=c("a","a","a","b","b","c","d","d")
y=c(1,2,3,1,2,1,1,2)
df=data.frame(cbind(x,y))
df=as.data.frame.matrix(table(df))
colNames=names(df)
transposeX = function(x){
temp=""
if(x[1]==1){
temp=paste(temp,colNames[1],sep=",")
}
if(x[2]==1){
temp=paste(temp,colNames[2],sep=",")
}
if(x[3]==1){
temp=paste(temp,colNames[3],sep=",")
}
return (temp)
}
df=data.frame(sapply(df,transposeX))
df2=cbind(colNames,df)
names(df)=c("x","y")
df$y=substring(df$y,2)
x=c("a","a","a","b","b","c","d","d")
y=c(1,2,3,1,2,1,1,2)
df=data.frame(cbind(x,y))
df=as.data.frame.matrix(table(df))
colNames=names(df)
transposeX = function(x){
temp=""
if(x[1]==1){
temp=paste(temp,colNames[1],sep=",")
}
if(x[2]==1){
temp=paste(temp,colNames[2],sep=",")
}
if(x[3]==1){
temp=paste(temp,colNames[3],sep=",")
}
return (temp)
}
df=data.frame(sapply(df,transposeX))
df2=cbind(colNames,df)
x=c("a","a","a","b","b","c","d","d")
y=c(1,2,3,1,2,1,1,2)
df=data.frame(cbind(x,y))
df=as.data.frame.matrix(table(df))
colNames=names(df)
transposeX = function(x){
temp=""
if(x[1]==1){
temp=paste(temp,colNames[1],sep=",")
}
if(x[2]==1){
temp=paste(temp,colNames[2],sep=",")
}
if(x[3]==1){
temp=paste(temp,colNames[3],sep=",")
}
return (temp)
}
df=data.frame(sapply(df,transposeX))
df=cbind(colNames,df)
names(df)=c("x","y")
df$y=substring(df$y,2)
View(df)
x=c("a","a","a","b","b","c","d","d")
y=c(1,2,3,1,2,1,1,2)
df=data.frame(cbind(x,y))
df=as.data.frame.matrix(table(df))
colNames=names(df)
transposeX = function(x){
temp=""
for (i in 1:length(colNames)){
if(x[i]==1){
temp=paste(temp,colNames[i],sep=",")
}
}
return (temp)
}
df=data.frame(sapply(df,transposeX))
df=cbind(colNames,df)
names(df)=c("x","y")
df$y=substring(df$y,2)
View(df)
setwd("your path")
library(caret)
library(stringr)
debtData=read.csv("fullDebtData.csv")
badDebtor=read.csv("PIDBadDebtor.csv")
#remove duplicated rows - only keep the most recent entry for each admission of the patient
debtData$Creation.Date=as.Date(debtData$Creation.Date,"%d/%m/%Y")
debtData$Admission.Date=as.Date(debtData$Admission.Date,"%d/%m/%Y")
debtData = debtData[order(debtData$Creation.Date,decreasing = T),]
debtData = debtData[!duplicated(debtData[,c("PID","Admission.Date")]),]
#select columns that have one unique value or
#they have very few unique values relative to the number of samples
#and the ratio of the frequency of the most common value to the
#frequency of the second most common value is large
nZero=nearZeroVar(debtData,saveMetrics=T)
colsRemove=row.names(nZero[nZero$nzv==TRUE,])
#check to see if any cols are impt
#colsRemove
#keep these cols even if nearZero
toKeep = c("Nationality","Dunning.Block.Text","MT.Band")
#to remove these cols even if not nearZero
toRemove = c("Case.No","Check.Digit","Created.By")
#remove cols
colsRemove = c(colsRemove,toRemove)
colsRemove = colsRemove[!colsRemove %in% toKeep]
colsRemove = colsRemove[!duplicated(colsRemove)]
debtData=debtData[,!names(debtData) %in% colsRemove]
#ensure that the cols are numeric
colsNum = c("B2.Percentage","C.Percentage","Outstanding.Debt","Total.Payable","Self.payer.Payable","Self.Payer.Paid","Self.Payer.Outstanding",
"MSV.Claim","Payment.1","Payment.2","Medisave.Account.1.Balance","Last.Inp.Payment.1","Last.Inp.Payment.2",
"No.1.Highest.Dollar.Value.Category.Amount","No.2.Highest.Dollar.Value.Category.Amount","No.3.Highest.Dollar.Value.Category.Amount",
"Gross.Bill.Amount")
#check what cols suppose to be numeric but are factor
factorCol = debtData[,colsNum]
factorCol = factorCol[ ,sapply(factorCol,is.factor)]
factorCol = data.frame(sapply(factorCol,as.character), stringsAsFactors=FALSE)
#these cols are factors as some of them have negative signs on the righ, i.e 103- , need to convert them
debtData[,names(factorCol)]=data.frame(sapply(factorCol, function(x) ifelse(str_sub(x,start=-1)=="-",suppressWarnings(as.numeric(gsub("-","",x))*-1),suppressWarnings(as.numeric(x)))))
#these cols shld be factor
#debtData$MT.Band[is.na(debtData$MT.Band)] = "Unknown" #replace NA with unknown
#replace NA with random sampling from existing MT Band
missing <- is.na(debtData$MT.Band)
numOfMissing <- sum(missing)
notMissing <- debtData$MT.Band[!missing]
debtData$MT.Band[missing]<- sample(notMissing,numOfMissing,replace = TRUE)
debtData$MT.Band = as.factor(debtData$MT.Band)
#replace NA with 0
debtData$No.2.Highest.Dollar.Value.Category.Amount[is.na(debtData$No.2.Highest.Dollar.Value.Category.Amount)] = 0 #replace NA with 0
debtData$No.3.Highest.Dollar.Value.Category.Amount[is.na(debtData$No.3.Highest.Dollar.Value.Category.Amount)] = 0 #replace NA with 0
#check if any rows still have NA data
#checkNA = debtData[!complete.cases(debtData),]
#define simplified patient class as PTE or SUB
debtData$sPatientClass = "SUB"
debtData$sPatientClass[c(grep("PTE|A|AP|ARF|B1",debtData$Patient.Class))]="PTE"
#define 3rd party payers
debtData$externalPayer="thirdParty"
debtData$externalPayer[c(grep("MCPS|MSH|PMI",debtData$Insurance.Provider.1))]="topInsurance"
debtData$externalPayer[debtData$Insurance.Provider.1==""]="noThirdParty"
#default as unknown
debtData$rating="Unknown"
#create badDebt col
debtData$badDebt=0
debtData$badDebt[debtData$PID %in% badDebtor$Bad.Debtor.PID] = 1
debtData$badDebt=as.factor(debtData$badDebt)
summary(debtData$badDebt)
#====use the manual rules to generate bad debt flag====#
#A class
debtData$rating[grep("VIP",debtData$Dunning.Block.Text)]="A1"
debtData$rating[debtData$rating=="Unknown" & debtData$externalPayer=="topInsurance" & debtData$Medisave.Account.1.Balance>0]="A2"
#some people has <$100 in medisave, should we count them as no medisave?
debtData$rating[debtData$rating=="Unknown" & debtData$externalPayer=="topInsurance" & debtData$Medisave.Account.1.Balance<=0]="A3"
#B class, have K1MFD = have Medifunds
debtData$rating[debtData$rating=="Unknown" & grepl("K1MFD",debtData$Insurance.Provider.1) & debtData$Medisave.Account.1.Balance>0]="B1"
debtData$rating[debtData$rating=="Unknown" & grepl("K1MFD",debtData$Insurance.Provider.1)]="B2"
#C Class sub
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality=="SG"&debtData$sPatientClass=="SUB"&
debtData$Self.Payer.Outstanding<5000 & debtData$externalPayer =="thirdParty"] ="C1"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality=="SG"&debtData$sPatientClass=="SUB"&
debtData$Self.Payer.Outstanding<5000 & debtData$externalPayer =="noThirdParty"] ="C2"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality=="SG"&debtData$sPatientClass=="SUB"&
debtData$Self.Payer.Outstanding>=5000 & debtData$externalPayer =="thirdParty"] ="C3"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality=="SG"&debtData$sPatientClass=="SUB"&
debtData$Self.Payer.Outstanding>=5000 & debtData$externalPayer =="noThirdParty"] ="C4"
#D Class
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality=="SG"&debtData$sPatientClass=="PTE"&
debtData$Self.Payer.Outstanding<5000 & debtData$externalPayer =="thirdParty"] ="D1"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality=="SG"&debtData$sPatientClass=="PTE"&
debtData$Self.Payer.Outstanding<5000 & debtData$externalPayer =="noThirdParty"] ="D2"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality=="SG"&debtData$sPatientClass=="PTE"&
debtData$Self.Payer.Outstanding>=5000 & debtData$externalPayer =="thirdParty"] ="D3"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality=="SG"&debtData$sPatientClass=="PTE"&
debtData$Self.Payer.Outstanding>=5000 & debtData$externalPayer =="noThirdParty"] ="D4"
#E Class
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality!="SG"& debtData$Self.Payer.Outstanding<5000 &
debtData$externalPayer =="thirdParty"] ="E1"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality!="SG"& debtData$Self.Payer.Outstanding<5000 &
debtData$externalPayer =="noThirdParty"] ="E2"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality!="SG"& debtData$Self.Payer.Outstanding>=5000 &
debtData$externalPayer =="thirdParty"] ="E3"
debtData$rating[debtData$rating=="Unknown" & debtData$Nationality!="SG"& debtData$Self.Payer.Outstanding>=5000 &
debtData$externalPayer =="noThirdParty"] ="E4"
#F class
#F1 - No data for Medical Negligence / Service Failure
#debtData$rating[debtData$badDebt==1] = "F2"
#check the distribution of ratings
debtData$rating=as.factor(debtData$rating)
summary(debtData$rating)
#export cleaned file
write.csv(debtData,"debtDataCleaned.csv",row.names=F)
#=====split into train / test data for both debt / non debt patients=====#
badD = debtData[debtData$badDebt==1,]
nonBadD = debtData[debtData$badDebt==0,]
#summary tables - freq of visits for each bad debtor
summaryT = data.frame(table(badD$PID))
summaryT = summaryT[order(summaryT$Freq, decreasing = T),]
#for one time bad debtors, split 50-50 into train / test
badDOneTime = badD[badD$PID %in% summaryT$Var1[summaryT$Freq==1], ]
trainindex = sample(1:nrow(badDOneTime), nrow(badDOneTime)*0.5)
trainDataOT = badDOneTime[trainindex,]
testDataOT = badDOneTime[-trainindex,]
#for those with freq > 2, again split 50-50 to test/train data
badDRepeat = badD[badD$PID %in% summaryT$Var1[summaryT$Freq>=2], ]
badDRepeatList = as.character(summaryT[summaryT$Freq>=2,"Var1"])
trainDataR=""
testDataR=""
#loop through badDRepeat, randomly select 50% of the visits per patient to be train/test
for(i in 1:length(badDRepeatList)){
PID=badDRepeat[badDRepeat$PID==badDRepeatList[i],]
trainindex = sample(1:nrow(PID), ceiling(nrow(PID)*.5))
if(identical(trainDataR,"")){
trainDataR=PID[trainindex, ]
testDataR=PID[-trainindex, ]
}else{
trainDataR = rbind(trainDataR,PID[trainindex, ])
testDataR = rbind(testDataR,PID[-trainindex, ])
}
}
#for non bad debt, just split by train %
trainPercent=0.8
trainindex = sample(1:nrow(nonBadD), nrow(nonBadD)*trainPercent)
trainDataN = nonBadD[trainindex, ]
testDataN = nonBadD[-trainindex, ]
trainData=rbind(trainDataN,trainDataR,trainDataOT)
testData=rbind(testDataN,testDataR,testDataOT)
#Because there is only 1 case with "B1" rating therefore, check if training data set contain the case with "B1" rating
#If never contain, we will get from debtData and add it to trainSet
if ("B1" %in% trainData$rating==FALSE){
b1Case = debtData[debtData$rating == "B1",];
trainData = rbind(trainData,b1Case);
}
write.csv(trainData,"trainData.csv")
write.csv(testData,"testData.csv")
library(fpp)
# Example 1 illustrating the usage of the "groups" argument
abc <- ts(5 + matrix(sort(rnorm(1600)), ncol = 16, nrow = 100))
sex <- rep(c("female", "male"), each = 8)
state <- rep(c("NSW", "VIC", "QLD", "SA", "WA", "NT", "ACT", "TAS"), 2)
gc <- rbind(sex, state)  # a matrix consists of strings.
gn <- rbind(rep(1:2, each = 8), rep(1:8, 2))  # a numerical matrix
rownames(gc) <- rownames(gn) <- c("Sex", "State")
x <- gts(abc, groups = gc)
y <- gts(abc, groups = gn)
library(fpp)
# Example 1 illustrating the usage of the "groups" argument
abc <- ts(5 + matrix(sort(rnorm(1600)), ncol = 16, nrow = 100))
sex <- rep(c("female", "male"), each = 8)
state <- rep(c("NSW", "VIC", "QLD", "SA", "WA", "NT", "ACT", "TAS"), 2)
gc <- rbind(sex, state)  # a matrix consists of strings.
gn <- rbind(rep(1:2, each = 8), rep(1:8, 2))  # a numerical matrix
rownames(gc) <- rownames(gn) <- c("Sex", "State")
x <- gts(abc, groups = gc)
y <- gts(abc, groups = gn)
library(hts)
# Example 1 illustrating the usage of the "groups" argument
abc <- ts(5 + matrix(sort(rnorm(1600)), ncol = 16, nrow = 100))
sex <- rep(c("female", "male"), each = 8)
state <- rep(c("NSW", "VIC", "QLD", "SA", "WA", "NT", "ACT", "TAS"), 2)
gc <- rbind(sex, state)  # a matrix consists of strings.
gn <- rbind(rep(1:2, each = 8), rep(1:8, 2))  # a numerical matrix
rownames(gc) <- rownames(gn) <- c("Sex", "State")
x <- gts(abc, groups = gc)
y <- gts(abc, groups = gn)
plot(x)
allf <- forecast(x, h=8)
plot(allf)
# Example 3 with a non-hierarchical grouped time series of 3 grouping variables (state, age and sex)
bnames2 <- c("VIC1F", "VIC1M", "VIC2F", "VIC2M", "VIC3F", "VIC3M",
"NSW1F", "NSW1F", "NSW2F", "NSW2M", "NSW3F", "NSW3M")
bts2 <- matrix(ts(rnorm(120)), ncol = 12)
colnames(bts2) <- bnames2
x2 <- gts(bts2, characters = c(3, 1, 1))
plot(x2)
allf <- forecast(x2, h=1)
plot(allf)
install.packages("ISLR")
setwd("D:/work/ida/IDA-KTPH-Scratch")
debtData=read.csv("debtData_cleaned.csv")
woData = read.csv("writeOffData.csv")
######join with writeoff data#####
#remove the SOC / A&E
woData=woData[grep("-",woData$Case.Visit.No.,invert=T),]
woData=woData[grep("KTPH",woData$Case.Visit.No.,invert=T),]
#adjust for Write.off.Amt bug (some write offs are Outstanding= 50, writeoff= -50)
woData$Write.off.Amt_fixed=0
woData$Write.off.Amt_fixed=ifelse(abs(woData$Write.off.Amt)==woData$Outstanding,
abs(woData$Write.off.Amt),woData$Write.off.Amt)
#remove duplicates (keep the latest, remove older duplicates)
woData$Adj.Date=as.Date(woData$Adj.Date, "%d/%m/%Y")
woData=woData[order(woData$Adj.Date,decreasing=T),]
woData=woData[!duplicated(woData$Case.Visit.No.),]
#remove check digit and join data
woData$Case.Visit.No.=substr(woData$Case.Visit.No.,1,10)
woData=woData[,c("Case.Visit.No.","Write.off.Amt_fixed")]
names(woData)[1]="Case.No"
woData2=merge(debtData,woData,by="Case.No",all.x=T)
woData2[is.na(woData2$Write.off.Amt_fixed),"Write.off.Amt_fixed"]=0
woData2$badDebt=ifelse(woData2$Write.off.Amt_fixed>=15,1,0)
woData2$Case.No=NULL
write.csv(woData2,"debtDataCleaned.csv",row.names=F)
#
# #inpatientData = read.csv("inpatient2010-2013.csv")
# colsToKeep=c("patient.ic","patient_full_name","case_no")
# inpatientData=inpatientData[,colsToKeep]#
# #join with PID
# PID = read.csv("PID.csv")
# PID = PID[,c("NRIC","PID")]
# woData2=merge(woData2,PID,by.x="patient.ic",by.y="NRIC",all.x=F)
#
#
# # woData2=merge(woData,debtData,by.x="Case.Visit.No.",by.y="Case.No",all.x=F)
#
#
# #export cleaned file
# write.csv(debtData,"debtDataCleaned.csv",row.names=F)
library(Hmisc)
install.packages("Hmisc")
library(Hsmic)
library(Hmisc)
age <- c(1,2,NA,4)
age.i <- impute(age)
# Could have used impute(age,2.5), impute(age,mean), impute(age,"random")
age.i
summary(age.i)
is.imputed(age.i)
library(ISLR)
nci.labs=NCI60$labs
nci.data=NCI60$data
View(nci.data)
library(stringr)
setwd("/Users/thiakx/Documents/playground/educitySG/data")
scholar=read.csv("scholarRaw.csv")
scholar=scholar[!scholar$Name.of.Scholar=="",]
scholar$Name.of.Scholar=gsub("*","",scholar$Name.of.Scholar) #remove * in name
scholar$Name.of.Scholar=gsub(",","",scholar$Name.of.Scholar) #remove , in name
scholar$Name.of.Scholar=str_trim(scholar$Name.of.Scholar) #fix extra spaces before and after name
scholar$Scholarship.Awarded=str_trim(scholar$Scholarship.Awarded) #fix extra spaces before and after name
scholar$Scholarship.Awarded=gsub(" \\)","\\)",scholar$Scholarship.Awarded) #remove space) in name
names(scholar)[4]="jcPoly"
scholar$jcPoly=gsub("\\-"," ",scholar$jcPoly)
scholar$school="Unknown"
scholar$school[grep("Raffles Institution|Raffles Junior College",scholar$jcPoly,ignore.case = T)]="Raffles Institution"
scholar$school[grep("Haw Chong Institution|Hwa Chong Institution|Hwa Chong Junior College",scholar$jcPoly,ignore.case = T)]="Hwa Chong Institution"
scholar$school[grep("Singapore Sports School",scholar$jcPoly,ignore.case = T)]="Singapore Sports School"
scholar$school[grep("International School|United World College of South East Asia",scholar$jcPoly,ignore.case = T)]="International Schools"
scholar$school[grep("Anglo Chinese Junior College",scholar$jcPoly,ignore.case = T)]="Anglo Chinese Junior College"
scholar$school[grep("Anglo Chinese School \\(Independent\\)",scholar$jcPoly,ignore.case = T)]="Anglo Chinese School (I)"
scholar$school[grep("Victoria Junior College",scholar$jcPoly,ignore.case = T)]="Victoria Junior College"
scholar$school[grep("National Junior College",scholar$jcPoly,ignore.case = T)]="National Junior College"
scholar$school[grep("Temasek Junior College",scholar$jcPoly,ignore.case = T)]="Temasek Junior College"
scholar$school[grep("Catholic Junior College",scholar$jcPoly,ignore.case = T)]="Catholic Junior College"
scholar$school[grep("Anderson Junior College",scholar$jcPoly,ignore.case = T)]="Anderson Junior College"
scholar$school[grep("Nanyang Junior College",scholar$jcPoly,ignore.case = T)]="Nanyang Junior College"
scholar$school[grep("Jurong Junior College",scholar$jcPoly,ignore.case = T)]="Jurong Junior College"
scholar$school[grep("Pioneer Junior College",scholar$jcPoly,ignore.case = T)]="Pioneer Junior College"
scholar$school[grep("Singapore Polytechnic",scholar$jcPoly,ignore.case = T)]="Singapore Polytechnic"
scholar$school[grep("Ngee Ann Polytechnic",scholar$jcPoly,ignore.case = T)]="Ngee Ann Polytechnic"
scholar$school[grep("Temasek Polytechnic",scholar$jcPoly,ignore.case = T)]="Temasek Polytechnic"
scholar$school[grep("Singapore Polytechnic",scholar$jcPoly,ignore.case = T)]="Singapore Polytechnic"
scholar$school[grep("NUS High School",scholar$jcPoly,ignore.case = T)]="NUS High School"
scholar$school[grep("Singapore Polytechnic",scholar$jcPoly,ignore.case = T)]="Singapore Polytechnic"
scholar$school[grep("Dunman High School",scholar$jcPoly,ignore.case = T)]="Dunman High School"
scholar$school[grep("River Valley High School",scholar$jcPoly,ignore.case = T)]="River Valley High School"
scholar$school[grep("St Joseph's Institution",scholar$jcPoly,ignore.case = T)]="St Joseph's Institution"
scholar$school[grep("Sngapore Polytechnic",scholar$jcPoly,ignore.case = T)]="Sngapore Polytechnic"
##Gender##
scholar$Gender=as.character(scholar$Gender)
scholar$Gender[scholar$Gender=="male"]="Male"
scholar$Gender[scholar$Gender==""]="Unknown"
##Prepare data for bubble##
# bubbleData=scholar[,c("Name.of.Scholar","Year.of.Award","postSecSch")]
names(scholar)=gsub("\\.","",names(scholar))
scholar$ScholarshipAwarded=gsub("\\(.*?\\)", "", scholar$ScholarshipAwarded) #remove all text in brackets
scholar$ScholarshipAwarded=gsub("Local-Overseas", "Local - Overseas", scholar$ScholarshipAwarded)
scholar$ScholarshipAwarded=gsub("Medicine", "", scholar$ScholarshipAwarded)
scholar$ScholarshipAwarded=gsub("-", "", scholar$ScholarshipAwarded)
scholar$ScholarshipAwarded=gsub("^ *|(?<= ) | *$", "", scholar$ScholarshipAwarded, perl=T)#replace multiple spaces with one
scholar$type="All Scholars"
scholar=subset(scholar, select=-c(jcPoly,UniversityandCourseofStudy,Country))
scholar$LastKnownRole=gsub(",|Unknown|-","",scholar$LastKnownRole)
scholar$Organisation=gsub(",|Unknown|-","",scholar$Organisation)
scholar$Course=as.character(scholar$Course)
scholar$Course=gsub("\\+","and",scholar$Course)
scholar$NameofScholar=substr(scholar$NameofScholar, 1, 6)
set.seed(1029293)
gender=c("Male","Female")
x=scholar$Gender[scholar$Gender=="Unknown"]
scholar$Gender[scholar$Gender=="Unknown"]=sample(gender,length(scholar$Gender[scholar$Gender=="Unknown"]),replace =T)
scholar$ScholarshipAwarded=as.character(scholar$ScholarshipAwarded)
scholar$ScholarshipAwardedTemp=scholar$ScholarshipAwarded
scholar$ScholarshipAwarded[grep("Overseas Merit Scholarship",scholar$ScholarshipAwardedTemp,ignore.case = T)]="Overseas Merit Scholarship"
scholar$ScholarshipAwarded[grep("Local - Overseas Merit Scholarship",scholar$ScholarshipAwardedTemp,ignore.case = T)]="Local-Overseas Merit Scholarship"
scholar$ScholarshipAwarded[grep("Local Merit Scholarship",scholar$ScholarshipAwardedTemp,ignore.case = T)]="Local Merit Scholarship"
scholar$ScholarshipAwarded[grep("SAF",scholar$ScholarshipAwardedTemp,ignore.case = T)]="SAF's Scholarship"
scholar$ScholarshipAwarded[grep("SPF",scholar$ScholarshipAwardedTemp,ignore.case = T)]="SPF's Scholarship"
scholar$ScholarshipAwarded[grep("Singapore Government Scholarship",scholar$ScholarshipAwardedTemp,ignore.case = T)]="SG Government Scholarship"
scholar$ScholarshipAwarded[grep("MAS|Master",scholar$ScholarshipAwardedTemp,ignore.case = T)]="Others"
scholar$ScholarshipAwarded[grep("President",scholar$ScholarshipAwardedTemp,ignore.case = T)]="President's Scholarship"
scholar$ScholarshipAwarded=as.factor(scholar$ScholarshipAwarded)
scholar$Course=as.character(scholar$Course)
scholar$CourseTemp=scholar$Course
scholar$Course[grep("Science|Biology|Chemistry",scholar$CourseTemp,ignore.case = T)]="Science"
scholar$Course[grep("Engineering",scholar$CourseTemp,ignore.case = T)]="Engineering"
scholar$Course=as.factor(scholar$Course)
keepTop = function(factorIn,varNum){
tempCol=data.frame(summary(factorIn))
names(tempCol)="count"
tempCol$var=row.names(tempCol)
#if there is already an others column, count that as 0
if(any(tempCol$var %in% c("Others"))){tempCol$count[tempCol$var=="Others"]=0}
tempCol=tempCol[order(tempCol$count,decreasing=T),]
topVar=tempCol$var[1:varNum]
factorIn=as.character(factorIn)
factorIn[!factorIn %in% topVar]="Others"
factorIn=as.factor(factorIn)
return (factorIn)
}
#reduce levels of factor
scholar$Course=keepTop(scholar$Course,8)
write.csv(scholar,"scholarData.csv",row.names=F)
